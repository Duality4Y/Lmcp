Tkkrlab Network Team                                          R. Nicolai
Request for Comments: 133742                                   June 2016

                LED MATRIX CONTROL PROTOCOL SPECIFICATION

1. STATUS OF THIS MEMO

   This document specifies a control protocol for led matrices,
   and assumes that the reader is familiar with udp, checksums,
   led matrices and whatever other bullshit you need to know.

                             TABLE OF CONTENTS

   1. STATUS OF THIS MEMO                                           1
   2. INTRODUCTION                                                  1
   3. PROTOCOL SPECIFICATION                                        2
     3.1 Packet header format                                       
     3.2 Checksum calculation                                       
     3.3 Magic
     3.4 Version
   4. COMMANDS                                                      3
     4.1 Introduction                                                 
     4.2 Basic commands
     4.2.1 Write buffer
     4.2.2 Clear
     4.2.3 Draw rows
     4.2.4 Draw image rectangle
     4.2.5 Write text line based                                    4
     4.2.6 Write text absolute
     4.2.7 Draw rows RGB
     4.2.8 Draw image rectangle RGB
     4.2.9 Set compatibility color
   5. OTHER NOTES                                                   5


2. INTRODUCTION
  The Led Matrix Control Protocol (or LMCP for short) is an UDP based
  protocol created to control led matrices. The goal is to create a
  simple, easy to understand protocol that can drive ledmatrices at
  moderate speed without glitches. The default port for use with this
  protocol is port 1337.

------------------------------------------------------------------------

Tkkrlab Network Team                                          [ Page 2 ]
Request for Comments: 133742                                   June 2016

3. PROTOCOL SPECIFICATION

3.1 Packet header format
   Each LMCP packet starts with a common header. The format of the
   header is as follows.

    0               1               2               3     
    0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7 
   +---------------------------------------------------------------+
   | Magic 1: 0x4C | Magic 2: 0x4D | Magic 3: 0x43 | Magic 4: 0x50 |
   +---------------------------------------------------------------+
    4               5               6               7     
    0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7 
   +---------------------------------------------------------------+
   | Version: 0x01 |  Chksum MSB   |  Chksum MSB   |  Command MSB  |
   +---------------------------------------------------------------+
    8               9               A   
    0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7
   +-----------------------------------------------+
   |  Command LSB  |  Length MSB   |  Length LSB   |
   +-----------------------------------------------+

3.2 Checksum calculation
   Each LMCP packet contains a 16-bit checksum, as described in the
   packet header format section (3.1) of this document. The checksum
   is calculated by adding together all bytes after byte 6 of the
   packet header. This includes bytes 7 through A of the packet
   header. The checksum value is allowed to overflow.
   Following the checksum the header also contains a 16-bit word
   describing the command issued and the length of the data part
   of the packet.

3.3 Magic
   The first four bytes of the LMCP packet header consist of a magic
   4-byte word and should always be kept at [0x4C, 0x4D, 0x43, 0x50]
   or in ASCII the string "LMCP".

3.4 Version
   The protocol as described in this document is version 1, identified
   by 0x01 in the version field.

------------------------------------------------------------------------

Tkkrlab Network Team                                          [ Page 3 ]
Request for Comments: 133742                                   June 2016

4. COMMANDS

4.1 Introduction 
   Each command is identified by it's unique identifying 16-bit word.
   After each command 65535 bytes of data may be included in the packet.
   Multiple commands may be sent in 1 datagram by repeating the full
   header.

4.2 Basic commands
  Basic commands have their 8 most siginificant bits set to 0x00. The
  least significant bits identify the command.

4.2.1 Write buffer
   This command is identified by 0x01.
   Function: Writes the contents of the framebuffer to the matrix
   Arguments: No arguments

4.2.2 Clear
   This command is identified by 0x02.
   Function: Clears the framebuffer
   Arguments: No arguments

4.2.3 Draw rows
   This command is identified by 0x10.
   Function: Write to 8 rows of the framebuffer at once.
   Arguments: * uint16_t y: y position of the row to draw
              * uint8_t data[MATRIX_WIDTH*8]: pixel data

4.2.4 Draw image rectangle
   This command is identified by 0x11.
   Function: Write to arbitrary rectangular location in the framebuffer.
   Arguments: * uint8_t x: top left x position of pixel data
              * uint8_t y: top left y position of pixel data
              * uint8_t width: width of pixel data
              * uint8_t height: height of pixel data
              * uint8_t data[width * height]: pixel data

------------------------------------------------------------------------

Tkkrlab Network Team                                          [ Page 4 ]
Request for Comments: 133742                                   June 2016

4.2.5 Write text line based
   This command is identified by 0x20.
   Function: Write text to framebuffer at text line.
   Note: Characters are 5x7 -> 6x8 including space and line separation.
   Arguments: * uint8_t x: top left x position in chars (0-15)
              * uint8_t y: top left y position in chars (0-5)
              * uint8_t brightness: brightness of text (0x00-0xFF)
              * [uint8_t text[...]]: text (ASCII)
              * 0x00: string terminator

4.2.6 Write text absolute
   This command is identified by 0x21.
   Function: Write text to framebuffer at absolute location.
   Arguments: * uint8_t x: top left x position in pixels (0-95)
              * uint8_t y: top left y position in pixels (0-47)
              * uint8_t brightness: brightness of text (0x00-0xFF)
              * [uint8_t text[...]]: text (ASCII)
              * 0x00: string terminator

4.2.7 Draw rows RGB
   This command is identified by 0x30.
   Function: Write to 8 rows of the framebuffer at once (RGB data).
   Arguments: * uint y: y position of the row to draw (0-5)
              * uint8_t data[MATRIX_WIDTH*8*3]: send the data for 8
                rows at a time, position is y * 8

4.2.8 Draw image rectangle RGB
   This command is identified by 0x31.
   Function: Write to arbitrary rectangular location in the framebuffer
             (RGB data).
   Arguments: * uint8_t x: top left x position of pixel data
              * uint8_t y: top left y position of pixel data
              * uint8_t width: width of pixel data
              * uint8_t height: height of pixel data
              * uint8_t data[MATRIX_WIDTH * MATRIX_HEIGHT * 3]:
                pixel data (RGB24)

4.2.9 Set compatibility color
   This command is identified by 0x32.
   Function: Sets the color for pixel data sent with a command which does
             not supply color (RGB) data.
   Arguments: * uint8_t r: Red color value.
              * uint8_t g: Green color value.
              * uint8_t b: Blue color value.

------------------------------------------------------------------------

Tkkrlab Network Team                                          [ Page 5 ]
Request for Comments: 133742                                   June 2016

5. OTHER NOTES
   This protocol is in no way capable of and will never be capable of
   controlling a teapot. For a protocol capable of controlling a teapot
   the HTCPCP/1.0 specification is suggested as described in RFC2324.


